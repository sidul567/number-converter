[{"D:\\myproject\\number_converter\\src\\index.js":"1","D:\\myproject\\number_converter\\src\\App.js":"2","D:\\myproject\\number_converter\\src\\reportWebVitals.js":"3","D:\\myproject\\number_converter\\src\\Component\\MainIndex.js":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":176,"mtime":1607587202762,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":8464,"mtime":1607642096865,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"h4j6x1",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"D:\\myproject\\number_converter\\src\\index.js",[],["21","22"],"D:\\myproject\\number_converter\\src\\App.js",["23"],"import logo from './logo.svg';\n// import './App.css';\nimport MainIndex from './Component/MainIndex';\nfunction App() {\n  return (\n      <MainIndex/>\n  );\n}\n\nexport default App;\n","D:\\myproject\\number_converter\\src\\reportWebVitals.js",[],"D:\\myproject\\number_converter\\src\\Component\\MainIndex.js",["24","25","26","27","28","29"],"import React, { Component } from 'react';\r\nimport './reset.css'\r\nimport './style.css'\r\nclass MainIndex extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n         decimal:0,\r\n         octal:0,\r\n         binary:0,\r\n         hexadecimal:0,\r\n         binaryarr:[],\r\n         textArr:[],\r\n         decimalArr:[],\r\n         invalidBinary:false,\r\n         checkValid:''\r\n        };\r\n        this.handleChangeDecimal = this.handleChangeDecimal.bind(this)\r\n        this.handleChangeBinary = this.handleChangeBinary.bind(this)\r\n        this.handleChangeOctal = this.handleChangeOctal.bind(this)\r\n        this.handleChangeHexadecimal = this.handleChangeHexadecimal.bind(this)\r\n        this.textToBinary = this.textToBinary.bind(this)\r\n        this.binaryToText = this.binaryToText.bind(this)\r\n        this.decimalToBinary = this.decimalToBinary.bind(this)\r\n    }\r\n    handleChangeDecimal(e){\r\n       var value = e.target.value\r\n       var decimal = parseInt(value) || 0\r\n       var binary = decimal.toString(2)\r\n       var octal = decimal.toString(8)\r\n       var hexadecimal = decimal.toString(16)\r\n       this.setState({decimal:decimal,octal:octal,binary:binary,hexadecimal:hexadecimal})\r\n    }\r\n \r\n    handleChangeBinary(e){\r\n     var value = e.target.value\r\n     var decimal = parseInt(value,2)||0\r\n     var binary = decimal.toString(2)\r\n     var octal = decimal.toString(8)\r\n     var hexadecimal = decimal.toString(16)\r\n     this.setState({decimal:decimal,octal:octal,binary:binary,hexadecimal:hexadecimal})\r\n    }\r\n \r\n    handleChangeOctal(e){\r\n     var value = e.target.value\r\n     var decimal = parseInt(value,8)||0\r\n     var binary = decimal.toString(2)\r\n     var octal = decimal.toString(8)\r\n     var hexadecimal = decimal.toString(16)  \r\n     this.setState({decimal:decimal,octal:octal,binary:binary,hexadecimal:hexadecimal})\r\n    }\r\n \r\n    handleChangeHexadecimal(e){\r\n     var value = e.target.value\r\n     var decimal = parseInt(value,16)||0\r\n     var binary = decimal.toString(2)\r\n     var octal = decimal.toString(8)\r\n     var hexadecimal = decimal.toString(16)  \r\n     this.setState({decimal:decimal,octal:octal,binary:binary,hexadecimal:hexadecimal})\r\n    }\r\n\r\n    Reset = ()=>{\r\n        this.setState({binary:0,decimal:0,hexadecimal:0,octal:0})\r\n    }\r\n\r\n    textToBinary(text){\r\n        const val = text.target.value;\r\n        this.setState({textArr:val});\r\n        const charCodeArray = [];\r\n        for(let i in val){\r\n            charCodeArray.push(val.charCodeAt(i))\r\n        }\r\n        var binaryArray = charCodeArray.map(char=>{\r\n            return char.toString(2);\r\n        })\r\n        var decimalArray = charCodeArray.map(ch=>{\r\n            return ch;\r\n        })\r\n        binaryArray = binaryArray.join(' ')\r\n        decimalArray = decimalArray.join(' ')\r\n        this.setState({binaryarr:binaryArray,decimalArr:decimalArray})\r\n        return {binaryArray,decimalArray};\r\n    }\r\n\r\n    binaryToText(codeArray){\r\n        const val = codeArray.target.value;\r\n        this.setState({binaryarr:val});\r\n        var text = \"\";\r\n        var splitIt = val.split(' ');\r\n        for(let i of splitIt){\r\n            const ch = String.fromCharCode(parseInt(i,2));\r\n            text = text.concat(ch);\r\n            for(let j in val){\r\n                if(val[j]!=1 && val[j]!=0 && val[j]!=' '){\r\n                    console.log(val[j])\r\n                    this.setState({checkValid:'Invalid Input'});\r\n                }else{\r\n                    this.setState({checkValid:''});\r\n                }\r\n            }\r\n        }\r\n        var decimalArray = splitIt.map(ch=>{\r\n            return (parseInt(ch,2)||'');\r\n        })\r\n        decimalArray = decimalArray.join(' ');\r\n        this.setState({textArr:text,decimalArr:decimalArray})\r\n        return text;\r\n    }\r\n\r\n    decimalToBinary(codeArray){\r\n        const val = codeArray.target.value;\r\n        this.setState({decimalArr:val});\r\n        var text = \" \"\r\n        var splitIt = val.split(' ');\r\n        for(let i of splitIt){\r\n            var ch = String.fromCharCode(parseInt(i));\r\n            if(ch<' ' && ch!='\\n'){\r\n                ch = '';\r\n            }\r\n            text = text.concat(ch);\r\n            for(let j in splitIt){\r\n                console.log(splitIt[j])\r\n                if((splitIt[j]<32) && splitIt[j]!=32 && splitIt[i]!=' '){\r\n                    console.log(val[j])\r\n                    this.setState({checkValid:'Invalid Input'});\r\n                    // this.setState({textArr:[]})\r\n\r\n                }else{\r\n                    this.setState({checkValid:''});\r\n                }\r\n            }\r\n        }\r\n        var binaryArray = splitIt.map(ch=>{\r\n            var value = parseInt(ch)||'';\r\n            var bin = value.toString(2);\r\n            return bin;\r\n        })\r\n        binaryArray = binaryArray.join(' ')\r\n        this.setState({textArr:text,binaryarr:binaryArray})\r\n        return text;\r\n    }\r\n\r\n    ResetText = ()=>{\r\n        this.setState({binaryarr:[],textArr:[],decimalArr:[]})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <div className=\"container\">\r\n        {/* <!-- header section --> */}\r\n        <header>\r\n            <h1 id=\"title\">Number Converter</h1>\r\n        </header>\r\n        {/* <!-- main section --> */}\r\n        <main id=\"main\">\r\n            {/* <!-- number system --> */}\r\n            <section id=\"number-system\">\r\n                <h2>Number System Conversations</h2>\r\n                <div className=\"box\">\r\n                    <div className=\"input-group\">\r\n                        <label>Decimal</label>\r\n                        <input type=\"text\" placeholder=\"Input any decimal number , eg: 123456\" value={this.state.decimal} onChange={this.handleChangeDecimal}/>\r\n                    </div>\r\n                    <div className=\"input-group\">\r\n                        <label>Binary</label>\r\n                        <input type=\"text\" placeholder=\"Input any Binary number , eg: 101010\" value={this.state.binary} onChange={this.handleChangeBinary}/>\r\n                    </div>\r\n                    <div className=\"input-group\">\r\n                        <label>Octal</label>\r\n                        <input type=\"text\" placeholder=\"Input any Octal number , eg: 765432\" value={this.state.octal} onChange={this.handleChangeOctal}/>\r\n                    </div>\r\n                    <div className=\"input-group\">\r\n                        <label>Hexadecimal</label>\r\n                        <input type=\"text\" placeholder=\"Input any Hexadecimal number , eg: AB12CD\" value={this.state.hexadecimal} onChange={this.handleChangeHexadecimal}/>\r\n                    </div>\r\n                    <div className=\"reset-button\">\r\n                        <button onClick={this.Reset}>Reset</button>\r\n                    </div>\r\n                    <div className=\"one-rem-space\"></div>\r\n                </div>\r\n            </section>\r\n            {/* <!-- text section --> */}\r\n            <section id=\"text-conversion\">\r\n                <h2>Text Conversations</h2>\r\n                <div className=\"box\">\r\n                    <div className=\"input-group\">\r\n                        <label>Enter your text below:</label>\r\n                        <textarea name=\"text-decimal\" id=\"\" cols=\"30\" rows=\"10\" value={this.state.textArr} onChange={this.textToBinary}/>\r\n                    </div>\r\n                    <div className=\"half-rem-space\"></div>\r\n                    <div className=\"input-group\">\r\n                        <label>Enter your Decimal below:</label>\r\n                        <textarea name=\"text-decimal\" id=\"\" cols=\"30\" rows=\"10\" value={this.state.decimalArr} onChange={this.decimalToBinary}/>\r\n                    </div>\r\n                    <div className=\"half-rem-space\"></div>\r\n                    <div className=\"input-group\">\r\n                        <label>Enter your Binary below:</label>\r\n                        <textarea name=\"Binary-decimal\" id=\"\" cols=\"30\" rows=\"10\" value={this.state.binaryarr} onChange={this.binaryToText}/>\r\n                    </div>\r\n                    <div className=\"reset-button\">\r\n                        <p style={{color:\"red\"}}>{this.state.checkValid}</p>\r\n                        <button onClick={this.ResetText}>Reset</button>\r\n                    </div>\r\n                    <div className=\"one-rem-space\"></div>\r\n                </div>\r\n            </section>\r\n        </main>\r\n    </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainIndex;",{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":1,"column":8,"nodeType":"36","messageId":"37","endLine":1,"endColumn":12},{"ruleId":"38","severity":1,"message":"39","line":95,"column":26,"nodeType":"40","messageId":"41","endLine":95,"endColumn":28},{"ruleId":"38","severity":1,"message":"39","line":95,"column":39,"nodeType":"40","messageId":"41","endLine":95,"endColumn":41},{"ruleId":"38","severity":1,"message":"39","line":95,"column":52,"nodeType":"40","messageId":"41","endLine":95,"endColumn":54},{"ruleId":"38","severity":1,"message":"39","line":118,"column":28,"nodeType":"40","messageId":"41","endLine":118,"endColumn":30},{"ruleId":"38","severity":1,"message":"39","line":124,"column":49,"nodeType":"40","messageId":"41","endLine":124,"endColumn":51},{"ruleId":"38","severity":1,"message":"39","line":124,"column":67,"nodeType":"40","messageId":"41","endLine":124,"endColumn":69},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]